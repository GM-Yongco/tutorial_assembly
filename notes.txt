==================================================
MAIN
=================================================

mounting and unmounting
	MOUNT 
	MOUNT <virtual drive letter> <directory you want to mount on letter>
	MLOUNT -U <the drive you want to unmount in dosbox>

	note: 
		dosbox has max 8 characters for directory names
		"MOUNT" view mounted directories

to compile
	A86.COM <name of file to compile>

=================================================
REGISTERS
=================================================

general purpose registers
	AX, BX, CX, DX
	each has 16 bits of memory
	each can be divided to bytes(8 bit segments)
		the H and L byte
			H for the high byte (first 8 bytes)
			L for the low byte (second/last 8 bytes)

DS (Data Segment)
SI (Source Index)
DI (Destination Index)
	all these registers are words(has size of 16bits)
	DS stores the location of specific memory segments
	SI and DI stores the offset of the memory locations

DS special adresses
	0B800H for text mode video memory
	0bF000 - 0bFFFF for BIOS ROM
	0x0000 - 0xFFFF for hardware devices
	etc.
	note, I only tested the text mode video memory

text mode video memory
	DOS BOX has a width and height of 80x25 characters
	0B800H accesses this 
	with b[DS:SI] you can access each character like an array
	every odd index of SI is reserved for character formatting 
		like color and background colour
	every even index is character information (what character should be there)
	for every b[DS:SI] their respective character format is in b[DS:SI + 1]

=================================================

In x86 assembly, only certain registers can be used as index registers
	SI (Source Index) and DI (Destination Index) are commonly used as index registers
	AX, BX, CX, DX, and SP cannot be used as index registers in most addressing modes
	addresses can also have different sized inputs
ex code
	MOV AL, 'a'
	mov DS, 0b800h
	mov CX, 0
	mov b[DS:CX], AL
	~          ^
	#ERROR 39: Bad Index Register
ex code 2
	MOV AX, 'A'
	mov DS, 0b800h
	mov SI, 0
	mov b[DS:SI], AX
	~               ^
	#ERROR 13: Byte/Word Combination Not Allowed 
ex code (this one works :DDD)(also works if you use AL)
	MOV AH, 'A'
	mov DS, 0b800h
	mov SI, 0
	mov b[DS:SI], AH

	INT 020

	
=================================================
COMMANDS
=================================================

compare(CMP)
	subtracts second operand from first
	sets flags depending on the result of the subtraction
		ZF	zero flag
		SF	sign flag
		CF	carry flag
		OF	overflow flag
	note from experience: 
		uses signed ints and 0ffffh is considered negative
		32767 is the biggest 16 bit positive signed int

Jump commands
	JMP	unconditional jumps
conditional jumps (uses the flags set by the last CMP done)
	JG		jump if greater
	JGE 	jump if greater/equal
	JL		jump if lesser
	JLE		jump if lesser.equal

DIV (unsigned divide)
MUL (unsigned multiply)
	both take AX and function argument was variables
	AX / DIV <divisor>
	AX * MUL <multiple>
	both outputs gets stored at AX after
	the remainder of DIV is placed in DX
		note: DX needs to be set to 0 before this or there'll be an error


=================================================
INTERRUPTS
=================================================

INT 020
this one tells the computer the program is done

=================================================
DEBUGGER
=================================================
	
debugger <your com file>
-t prints the values of the registers line by line

doesnt work for me for some reason
i have to ask sir about it pa
	


